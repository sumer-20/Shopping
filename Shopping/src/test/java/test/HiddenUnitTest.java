package test;

import hackerrank.HibernateSessionHelper;
import hackerrank.Purchase;
import hackerrank.PurchasedItem;
import java.util.Arrays;
import java.util.List;
import org.junit.AfterClass;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.BeforeClass;

public class HiddenUnitTest {
    public HiddenUnitTest() {
    }
    
    @BeforeClass
    public static void reopen() {
        if (!HibernateSessionHelper.hibernateSession.getSession().isConnected()) {
            HibernateSessionHelper.reopenSession();
        }
    }
    
    @AfterClass
    public static void close() {
        HibernateSessionHelper.hibernateSession.closeSession();
    }
    
    @Test
    public void DayFivePurchaseTest() {
        List<String> itemsBarcode = Arrays.asList("47000244", "74001631", "74003536", "47000618", "74002405", "74003520", "74000783", "74002985", "47000864", "74003766", "74004441", "47000180", "74003222", "74002682", "74000747", "74004144", "47000076", "74000587", "74002958", "74000126", "74001743", "74002561", "74001201", "74003069", "74000863", "74004801", "47000355", "74004413", "47000936", "74004107", "74001535", "74001317", "74004900", "74003392", "74001429", "74003727", "74002333", "47000943", "74000608", "74003046", "74001468", "74000648", "74000004", "47000899", "74000416", "74001175", "74001573", "74001879", "47000520", "74003823", "74000819", "74004428", "74000221", "74002065", "47000310", "74001044", "74001516", "47000818", "74002660", "74001337", "74000112", "74000847", "74004511", "74001349", "74003178", "47000894", "74004361", "74004840", "74003201", "74001740", "74001976", "74002197", "74001865", "74004580", "74004412");
        List<PurchasedItem> purchasedItemsList = Purchase.getPurchasedItemsList(itemsBarcode);
        
        assertEquals(itemsBarcode.stream().filter(e -> e.startsWith("74")).count(), purchasedItemsList.size());
        
        float total = purchasedItemsList.stream().map((item) -> item.getItemDiscountedPrice())
                .reduce(0.0f, (accumulator, _item) -> accumulator + _item);
        
        assertEquals(139026.88, total, 0.01f);
    }
    
    @Test
    public void DaySixPurchaseTest() {
        List<String> itemsBarcode = Arrays.asList("74003423", "74000530", "74003764", "74000750", "74000897", "74000238", "74001405", "47000038", "74003364", "47000102", "74003769", "74001887", "74002267", "74001720", "74004970", "47000955", "74002232", "74002164", "74004402", "74001738", "47000143", "74003325", "74001577", "74002520", "74004857", "74004803", "74004822", "74001417", "74003970", "74001381", "74004608", "74002740", "74003580", "74001421", "74003246", "74000150", "74000171", "74002603", "47000255", "74001747", "74002543", "74000551", "74003066", "74004209", "74004609", "47000575", "74000370", "74000343", "74001348", "74000870", "74001998", "74002219", "74001593", "47000634", "74003080", "74003878", "74003728", "47000034", "74003589", "47000121", "74004887", "74004938", "74002968", "74001854", "74001011", "47000879", "74004847", "74002768", "74002339", "74002180", "74001866", "74004696", "47000954", "74003151", "47000139", "47000188", "74002986", "74004264", "74001035", "74001937", "74004382", "74000112", "74003651", "74003081", "74004269", "74004317", "74000910", "74001247", "47000614", "74004406", "74001540", "47000254", "74003655", "74003218", "74003683", "47000058", "74001600", "47000643", "74002277", "74002113");
        List<PurchasedItem> purchasedItemsList = Purchase.getPurchasedItemsList(itemsBarcode);
        
        assertEquals(itemsBarcode.stream().filter(e -> e.startsWith("74")).count(), purchasedItemsList.size());
        
        float total = purchasedItemsList.stream().map((item) -> item.getItemDiscountedPrice())
                .reduce(0.0f, (accumulator, _item) -> accumulator + _item);
        
        assertEquals(186881.06, total, 0.01f);
    }
    
    @Test
    public void DaySevenPurchaseTest() {
        List<String> itemsBarcode = Arrays.asList("74000573", "74002499", "74004474", "74003483", "74004520", "47000456", "74000065", "74002559", "74000088", "74000732", "74000745", "74002959", "47000406", "74001127", "74004615", "74002749", "47000009", "74000327", "74001767", "47000831", "74000434", "74002118", "74003380", "74003580", "74003691", "74000452", "74000852", "74004287", "74001553", "74000738", "74003444", "74002565", "74003945", "74002036", "74000574", "74001932", "74003720", "74002347", "47000593", "74002478", "74003355", "74001697", "47000249", "47000670", "74004126", "74001019", "74001481", "74000547", "74001611", "47000795", "74004530", "47000334", "74001610", "74004789", "74000985", "74004655", "74002785", "74004446", "74001949", "74004382", "74001780", "74001982", "74004261", "74002740", "74000865", "74002255", "74000579", "74003128", "74004383", "74001707", "74003780", "74003418", "74000479", "74002437", "74002244", "74003309", "74003607", "74004326", "74001280", "74002451", "74002536", "74000736", "74001678", "74001876", "74002856", "47000566", "47000690", "74003860", "74004514", "74001994", "74002283", "47000775", "47000502", "74000059", "74003359", "74004906", "74003500", "74002134", "74003345", "47000944", "74001924", "74004036", "74001565", "47000514", "74004327", "47000960", "74000923", "74001192", "74000371", "74002029", "74000149", "74003830", "74002034", "74000243", "74004576", "74003676", "74001706", "74003539", "74003633", "74001202", "74000713", "74001966", "74001846", "74001943", "74001561", "74003218", "74002440", "74000685", "74004557", "74002162", "74003193", "74002428", "74000282", "74004613", "74002656", "47000328", "74002537", "74002619", "74001506", "74002325", "74002243", "47000686", "74003975", "47000238", "47000479", "74003578", "74001861", "47000948", "47000104", "74004075", "47000711", "47000567", "47000452", "74004168", "47000038", "47000853", "74003297", "47000532", "47000754", "74004496", "74003680", "47000327", "74003940", "74002497", "74002218", "74004035", "47000149", "74002284", "74004127", "74001765", "74000422", "74002363", "74003533", "74000428", "74000438", "74000489", "74000036", "74000500", "74001859", "74003899", "47000320", "74000063", "47000791", "74000926", "47000118", "74002448", "74001451", "74004289", "74002104", "74000416", "74000049", "74002464", "74002072", "74002864", "74000504", "74001978", "74004892", "74004207", "74000204", "74000072");
        List<PurchasedItem> purchasedItemsList = Purchase.getPurchasedItemsList(itemsBarcode);
        
        assertEquals(itemsBarcode.stream().filter(e -> e.startsWith("74")).count(), purchasedItemsList.size());
        
        float total = purchasedItemsList.stream().map((item) -> item.getItemDiscountedPrice())
                .reduce(0.0f, (accumulator, _item) -> accumulator + _item);
        
        assertEquals(363361.5, total, 0.01f);
    }
    
    @Test
    public void DayEightPurchaseTest() {
        List<String> itemsBarcode = Arrays.asList("74004239", "74001019", "74001452", "74002428", "74003184", "74004763", "74004444", "74001763", "74001281", "74003517", "74002839", "47000763", "74004030", "74000316", "74000862", "74001538", "74003669", "74004392", "74000720", "74000033", "74001216", "47000936", "74001976", "74001466", "74003732", "47000538", "74004016", "74002373", "74002738", "47000154", "74002974", "74004835", "74004484", "74004419", "74000366", "74000595", "74004541", "47000461", "47000271", "74000656", "47000788", "74000495", "74000036", "74001925", "74000711", "74002047", "47000806", "74002208", "74000256", "74003990", "47000495", "74003219", "74003651", "47000859", "74001595", "47000628", "74000459", "74001913", "74000645", "74002551", "74002630", "74000354", "74002563", "74004298", "74004892", "74002134", "74003142", "74002500", "74004884", "74000980", "74001927", "74004933", "74001476", "74000878", "74002213", "74004707", "47000825", "74001766", "74001443", "74001851", "74002467", "74003380", "74002276", "74004258", "74002391", "74000103", "74003363", "47000174", "47000332", "74001404", "74004927", "47000902", "74004626", "74001424", "74000039", "74003415", "74002635", "74004937", "74004739", "74002246", "74000646", "74000616", "74003012", "74003853", "74003065", "74000937", "47000761", "47000531", "74000179", "74004886", "74003238", "74003202", "74002982", "74002259", "74003591", "74002938", "74000158", "74001782", "74002742", "74000195", "74001839", "74001656", "74004237", "74000589", "74004183", "74001891", "47000904", "47000501", "47000042", "47001000", "74003049", "74004498", "74003456", "74004034", "74000048", "74003764", "47000004", "74004196", "47000720", "74001509", "74004157", "74000071", "74002620", "47000412", "74003008", "74000748", "74000674", "74001695", "74001168", "74000991", "74003313", "74004079", "74001941", "74001152", "74000843", "47000485", "74002173", "74000918", "47000971", "74000257", "47000441", "74003268", "74001495", "74001971", "74000274", "74000576", "74000773", "47000650", "74001765", "74000568", "74001661", "74003993", "74000462", "74003282", "74004960", "74000210", "74000247", "74000423", "47000071", "74000716", "47000673", "74004052", "74002196", "74004565", "74002363", "47000429", "74001999", "74000428", "74001590", "74002095", "47000249", "74004086", "74001158", "47000679", "74000591", "74001773", "74001230", "47000555", "74003540", "74004062");
        List<PurchasedItem> purchasedItemsList = Purchase.getPurchasedItemsList(itemsBarcode);
        
        assertEquals(itemsBarcode.stream().filter(e -> e.startsWith("74")).count(), purchasedItemsList.size());
        
        float total = purchasedItemsList.stream().map((item) -> item.getItemDiscountedPrice())
                .reduce(0.0f, (accumulator, _item) -> accumulator + _item);
        
        assertEquals(371583.28, total, 0.01f);
    }
    
    @Test
    public void totalItemsTest() {
        Integer availableItems = Purchase.getTotalAvailableItems();
        Integer unavailableItems = Purchase.getTotalUnAvailableItems();
        
        assertTrue(availableItems == 5000);
        assertTrue(unavailableItems == 1000);
    }
    
    @Test
    public void lowerPricedItemsTest() {
        Integer lowerThan$500 = Purchase.getTotalAvailableLowerPricedItemsWithoutDiscount(500.0f);
        Integer lowerThan$1000 = Purchase.getTotalAvailableLowerPricedItemsWithoutDiscount(1000.0f);
        Integer lowerThan$2000 = Purchase.getTotalAvailableLowerPricedItemsWithoutDiscount(2000.0f);
        Integer lowerThan$5000 = Purchase.getTotalAvailableLowerPricedItemsWithoutDiscount(5000.0f);
        
        assertTrue(lowerThan$500 == 444);
        assertTrue(lowerThan$1000 == 912);
        assertTrue(lowerThan$2000 == 1968);
        assertTrue(lowerThan$5000 == 5000);
    }
    
    @Test
    public void higherPricedItemsTest() {
        Integer higherThan$500 = Purchase.getTotalAvailableHigherPricedItemsWithoutDiscount(500.0f);
        Integer higherThan$1000 = Purchase.getTotalAvailableHigherPricedItemsWithoutDiscount(1000.0f);
        Integer higherThan$2000 = Purchase.getTotalAvailableHigherPricedItemsWithoutDiscount(2000.0f);
        Integer higherThan$5000 = Purchase.getTotalAvailableHigherPricedItemsWithoutDiscount(5000.0f);
        
        assertTrue(higherThan$500 == 4556);
        assertTrue(higherThan$1000 == 4087);
        assertTrue(higherThan$2000 == 3032);
        assertTrue(higherThan$5000 == 0);
    }
}
